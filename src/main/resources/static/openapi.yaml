openapi: 3.1.0

info:
  title: DMS
  summary: Document Management System for Software Documentation
  version: "1.0"

servers:
  - url: http://localhost:8080
    description: Local server

components:

  schemas:

    UserDTO:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: jakub
        email:
          type: string
          format: email
          example: jakub@gmail.com

    DocumentDTO:
      type: object
      properties:
        documentId:
          type: string
          format: uuid
          example: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a
        author:
          $ref: '#/components/schemas/UserDTO'
        name:
          type: string
          example: dog.jpeg
        type:
          type: string
          example: image/jpeg
        createdAt:
          type: string
          format: date-time
          example: 2023-10-14T09:32:01.485815
        updatedAt:
          type: string
          format: date-time
          example: 2023-10-14T09:32:01.485815

    DocumentRevisionDTO:
      type: object
      properties:
        revisionId:
          type: integer
          format: int64
          example: 1
        author:
          $ref: '#/components/schemas/UserDTO'
        name:
          type: string
          example: dog.jpeg
        type:
          type: string
          example: image/jpeg
        createdAt:
          type: string
          format: date-time
          example: 2023-10-14T09:32:01.485815

    UserRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 40
          example: jakub
        email:
          type: string
          format: email
          maxLength: 255
          example: jakub@gmail.com
      required:
        - username
        - email

    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
          format: uri

    ProblemDetailWithErrors:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
        instance:
          type: string
          format: uri
        errors:
          type: array
          items:
            type: string

    Pageable:
      type: object
      properties:
        content:
          type: array
        pageable:
          type: object
          properties:
            pageNumber:
              type: integer
            pageSize:
              type: integer
            sort:
              type: object
              properties:
                empty:
                  type: boolean
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
            offset:
              type: integer
            paged:
              type: boolean
            unpaged:
              type: boolean
        last:
          type: boolean
        totalElements:
          type: integer
        totalPages:
          type: integer
        first:
          type: boolean
        size:
          type: integer
        number:
          type: integer
        sort:
          type: object
          properties:
            empty:
              type: boolean
            sorted:
              type: boolean
            unsorted:
              type: boolean
        numberOfElements:
          type: integer
        empty:
          type: boolean

  examples:

    PageableWithDocuments:
      summary: Pageable with documents
      value:
        content:
          - documentId: "2481d886-e7cb-45f1-9577-bd5c6329aac4"
            author:
              userId: 3
              username: "pepa"
              email: "pepa@seznam.cz"
            name: "document.pdf"
            type: "application/pdf"
            createdAt: "2023-10-15T15:40:51.340065"
            updatedAt: "2023-10-15T15:40:51.340101"
          - documentId: "58475d9f-4299-423b-b2e8-fbeae5dd51df"
            author:
              userId: 1
              username: "ondra"
              email: "ondra@gmail.com"
            name: "schema.pdf"
            type: "application/pdf"
            createdAt: "2023-10-14T09:32:08.473799"
            updatedAt: "2023-10-14T09:32:08.473817"
        pageable:
          pageNumber: 0
          pageSize: 2
          sort:
            empty: false
            sorted: true
            unsorted: false
          offset: 0
          paged: true
          unpaged: false
        last: true
        totalElements: 2
        totalPages: 1
        first: true
        size: 2
        number: 0
        sort:
          empty: false
          sorted: true
          unsorted: false
        numberOfElements: 2
        empty: false

    PageableWithRevisions:
      summary: Pageable with revisions
      value:
        content:
          - revisionId: 4
            author:
              userId: 2
              username: "adam"
              email: "adam@gmail.com"
            name: "school.pdf"
            type: "application/pdf"
            createdAt: "2023-10-14T11:20:00.646173"
        pageable:
          pageNumber: 0
          pageSize: 3
          sort:
            empty: false
            sorted: true
            unsorted: false
          offset: 0
          paged: true
          unpaged: false
        last: true
        totalElements: 1
        totalPages: 1
        first: true
        size: 3
        number: 0
        sort:
          empty: false
          sorted: true
          unsorted: false
        numberOfElements: 1
        empty: false

    PageableWithVersions:
      summary: Pageable with versions
      value:
        content: [ 1, 2, 3 ]
        pageable:
          pageNumber: 0
          pageSize: 3
          sort:
            empty: true
            sorted: false
            unsorted: true
          offset: 0
          paged: true
          unpaged: false
        last: false
        totalElements: 19
        totalPages: 7
        first: true
        size: 3
        number: 0
        sort:
          empty: true
          sorted: false
          unsorted: true
        numberOfElements: 3
        empty: false

  responses:

    20*DocumentDTOObject:
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/DocumentDTO'

    20*DocumentDTOArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DocumentDTO'

    20*DocumentRevisionDTOObject:
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/DocumentRevisionDTO'

    20*DocumentRevisionDTOArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/DocumentRevisionDTO'

    200DocumentDownload:
      description: "Document downloaded successfully."
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
      headers:
        Content-Disposition:
          description: Specifies the filename for the downloaded document.
          schema:
            type: string

    200RevisionDownload:
      description: Revision downloaded successfully.
      content:
        application/octet-stream:
          schema:
            type: string
            format: binary
      headers:
        Content-Disposition:
          description: Specifies the filename for the downloaded revision.
          schema:
            type: string

    400MissingRequestPart:
      description: Missing request part.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    400InvalidDataProvided:
      description: Invalid data provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    400PatternDoesntMatch:
      description: Pattern does not match.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

    404DocumentOrVersionNotFound:
      description: Either document or version was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          examples:
            Document Not Found:
              summary: Document Not Found
              value:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/versions/1
            Version Not Found:
              summary: Version Not Found
              value:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with version: 5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/versions/5

  requestBodies:

    UserAndFile:
      description: User with a file.
      required: true
      content:
        application/form-data:
          schema:
            type: object
            properties:
              user:
                name: user
                $ref: '#/components/schemas/UserRequest'
              file:
                name: file
                type: string
                format: binary

  parameters:

    DocumentId:
      name: id
      in: path
      required: true
      description: The document ID.
      schema:
        type: string
        format: uuid

    RevisionId:
      name: id
      in: path
      required: true
      description: The revision ID.
      schema:
        type: integer
        format: int64

    Revision:
      name: revision
      in: path
      required: true
      description: The revision ID.
      schema:
        type: integer
        format: int64

    DocumentVersion:
      name: version
      in: path
      required: true
      description: The document version.
      schema:
        type: integer
        format: int64

    Page:
      name: page
      in: query
      description: The page number for pagination.
      schema:
        type: integer
        minimum: 0
        default: 0

    Limit:
      name: limit
      in: query
      description: The maximum number of items to return per page.
      schema:
        type: integer
        minimum: 1
        default: 10

    Sort:
      name: sort
      in: query
      required: false
      description: |
        A comma-separated list of sort keys.
        Valid keys are 'documentId', 'authorAuthorId', 'name', 'type', 'hash', 'createdAt', 'updatedAt'.
        Each key can be sorted by either: asc (ascending order) or desc (descending order).
        Example usage: ?sort=name:desc,type:asc.
      schema:
        type: string
        pattern: '(([a-zA-Z]+):(asc|desc)(?:,|$))+'

    Filter:
      name: filter
      in: query
      required: false
      description: |
        A comma-separated list of filter keys.
        Valid keys are 'documentId', 'authorAuthorId', 'name', 'type', 'hash', 'createdAt', 'updatedAt'.
        Each key can be filtered using any value.
        Filtering operates by checking whether the string contains the given substring.
        Example usage: ?filter=name:logo,type:image
      schema:
        type: string
        pattern: '(([a-zA-Z]+):([^,]+)(?:,|$))+'

paths:

  /documents:

    get:
      description: Retrieve a list of the documents.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
      responses:
        200:
          description: Successfully retrieved list of the documents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable'
              examples:
                PageableWithVersions:
                  summary: List Documents
                  $ref: '#/components/examples/PageableWithDocuments'
        400:
          description: Pattern does not match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/pattern-doesnt-match
                title: Pattern Doesn't Match
                status: 400
                detail: "The 'sort' parameter does not match the expected format"
                instance: /documents

  /documents/{id}:

    get:
      description: Retrieves the details about a document.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        200:
          description: Successfully retrieved details about a document.
          $ref: '#/components/responses/20*DocumentDTOObject'
        404:
          description: Document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5

    put:
      description: Updates a document.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      requestBody:
        $ref: '#/components/requestBodies/UserAndFile'
      responses:
        200:
          description: Document updated successfully.
          $ref: '#/components/responses/20*DocumentDTOObject'
        400:
          description: Either invalid data provided or some request parts are missing.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/400InvalidDataProvided'
                  - $ref: '#/components/responses/400MissingRequestPart'
              examples:
                InvalidDataProvided:
                  summary: Invalid Data Provided
                  value:
                    type: http://localhost:8080/errors/invalid-data
                    title: Invalid Data Provided"
                    status: 400
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a
                    errors: [ "Username is mandatory" ]
                MissingRequestPart:
                  summary: Missing Request Part
                  value:
                    type: http://localhost:8080/errors/missing-request-part
                    title: Missing Request Part
                    status: 400
                    detail: Required part 'user' is not present.
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a
        404:
          description: Document for overwriting not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5

    delete:
      description: Deletes a document and all revisions associated with that document.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        204:
          description: Document deleted successfully.
        404:
          description: Document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5

  /documents/upload:

    post:
      description: Upload a document.
      tags:
        - documents
      requestBody:
        $ref: '#/components/requestBodies/UserAndFile'
      responses:
        201:
          description: Document uploaded successfully.
          $ref: '#/components/responses/20*DocumentDTOObject'
        400:
          description: Either invalid data provided or some request parts are missing.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - $ref: '#/components/schemas/ProblemDetailWithErrors'
              examples:
                InvalidDataProvided:
                  summary: Invalid Data Provided
                  value:
                    type: http://localhost:8080/errors/invalid-data
                    title: Invalid Data Provided
                    status: 400
                    instance: /documents/upload
                    errors: [ "Username is mandatory" ]
                MissingRequestPart:
                  summary: Missing Request Part
                  value:
                    type: http://localhost:8080/errors/missing-request-part
                    title: Missing Request Part
                    status: 400
                    detail: Required part 'user' is not present.
                    instance: /documents/upload
        413:
          description: File size exceeded maximum upload size.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/payload-too-large
                title: Payload Too Large
                status: 413
                detail: "Maximum upload size exceeded"
                instance: /documents/upload

  /documents/{id}/download:

    get:
      description: Downloads a document.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        200:
          $ref: '#/components/responses/200DocumentDownload'
        404:
          description: Document not found for download.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/download

  /documents/{id}/revisions:

    get:
      description: List document revisions.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
      responses:
        200:
          description: Successfully retrieved list of the revisions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable'
              examples:
                PageableWithVersions:
                  summary: List Document Revisions
                  $ref: '#/components/examples/PageableWithRevisions'
        400:
          description: Pattern does not match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/pattern-doesnt-match
                title: Pattern Doesn't Match
                status: 400
                detail: "The 'sort' parameter does not match the expected format"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a/revisions

  /documents/{id}/revisions/upload:

    post:
      description: Upload document revision.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      requestBody:
        $ref: '#/components/requestBodies/UserAndFile'
      responses:
        201:
          description: Revision uploaded successfully.
          $ref: '#/components/responses/20*DocumentRevisionDTOObject'
        400:
          description: Either invalid data provided or some request parts are missing.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - $ref: '#/components/schemas/ProblemDetailWithErrors'
              examples:
                InvalidDataProvided:
                  summary: Invalid Data Provided
                  value:
                    type: http://localhost:8080/errors/invalid-data
                    title: Invalid Data Provided"
                    status: 400
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a/revisions/upload
                    errors: [ "Username is mandatory" ]
                MissingRequestPart:
                  summary: Missing Request Part
                  value:
                    type: http://localhost:8080/errors/missing-request-part
                    title: Missing Request Part
                    status: 400
                    detail: Required part 'user' is not present.
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a/revisions/upload
        413:
          description: File size exceeded maximum upload size.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/payload-too-large
                title: Payload Too Large
                status: 413
                detail: "Maximum upload size exceeded"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a/revisions/upload

  /documents/{id}/revisions/{revision}:

    put:
      description: Switch document to a specific revision.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/Revision'
      responses:
        200:
          description: Successfully switched document to revision.
          $ref: '#/components/responses/20*DocumentDTOObject'
        404:
          description: Either document or revision was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                Document Not Found:
                  summary: Document Not Found
                  value:
                    type: http://localhost:8080/errors/document-not-found
                    title: Document Not Found
                    status: 404
                    detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/revisions/1
                Revision Not Found:
                  summary: Revision Not Found
                  value:
                    type: http://localhost:8080/errors/revision-not-found
                    title: Revision Not Found
                    status: 404
                    detail: "Revision with ID: 1 was not found"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/revisions/1

  /documents/{id}/versions:

    get:
      description: List document versions.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: Successfully listed document versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable'
              examples:
                PageableWithVersions:
                  summary: List Document Versions
                  $ref: '#/components/examples/PageableWithVersions'
        404:
          description: Document not found for listing versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/versions

  /documents/{id}/versions/{version}:

    get:
      description: Get document version.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/DocumentVersion'
      responses:
        200:
          description: Successfully retrieved document version.
          $ref: '#/components/responses/20*DocumentDTOObject'
        404:
          $ref: '#/components/responses/404DocumentOrVersionNotFound'

    put:
      description: Switch document to a specific version.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/DocumentVersion'
      responses:
        200:
          description: Successfully switched document to a version.
          $ref: '#/components/responses/20*DocumentDTOObject'
        404:
          $ref: '#/components/responses/404DocumentOrVersionNotFound'

  /revisions:

    get:
      description: List all revisions.
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
      responses:
        200:
          description: Successfully retrieved list of the revisions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pageable'
              examples:
                PageableWithVersions:
                  summary: List Revisions
                  $ref: '#/components/examples/PageableWithRevisions'
        400:
          description: Pattern does not match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/pattern-doesnt-match
                title: Pattern Doesn't Match
                status: 400
                detail: "The 'sort' parameter does not match the expected format"
                instance: /revisions

  /revisions/{id}:

    get:
      description: Get a revision.
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/RevisionId'
      responses:
        200:
          description: Successfully retrieved a revision.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentRevisionDTO'
              example:
                revisionId: 4
                author:
                  userId: 2
                  username: "adam"
                  email: "adam@gmail.com"
                name: "dog.pdf"
                type: "application/pdf"
                createdAt: "2023-10-14T11:20:00.646173"
        404:
          description: Revision not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/revision-not-found
                title: Revision Not Found
                status: 404
                detail: "Revision with ID: 5 was not found"
                instance: /revisions/5

    delete:
      description: Delete revision.
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/RevisionId'
      responses:
        204:
          description: Successfully deleted a revision.
        404:
          description: Revision not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/revision-not-found
                title: Revision Not Found
                status: 404
                detail: "Revision with ID: 5 was not found"
                instance: /revisions/5

  /revisions/{id}/download:

    get:
      description: Download a revision.
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/RevisionId'
      responses:
        200:
          $ref: '#/components/responses/200RevisionDownload'
        404:
          description: Revision not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/revision-not-found
                title: Revision Not Found
                status: 404
                detail: "Revision with ID: 5 was not found"
                instance: /revisions/5/download
