openapi: 3.0.3

info:
  title: DMS
  description: Document Management System for Software Documentation
  version: "1.0"

servers:
  - url: http://localhost:8080
    description: Local server

components:

  schemas:

    UserDTO:
      $ref: './schema/UserDTO.yaml'
    DocumentDTO:
      $ref: './schema/DocumentDTO.yaml'
    DocumentWithVersionDTO:
      $ref: './schema/DocumentWithVersionDTO.yaml'
    DocumentRevisionDTO:
      $ref: './schema/DocumentRevisionDTO.yaml'
    UserRequest:
      $ref: './schema/UserRequest.yaml'
    ProblemDetail:
      $ref: './schema/ProblemDetail.yaml'
    ProblemDetailWithErrors:
      $ref: './schema/ProblemDetailWithErrors.yaml'
    PageWithDocuments:
      $ref: './schema/PageWithDocuments.yaml'
    PageWithRevisions:
      $ref: './schema/PageWithRevisions.yaml'
    PageWithVersions:
      $ref: './schema/PageWithVersions.yaml'

  examples:

    PageableWithDocuments:
      $ref: './example/PageableWithDocuments.yaml'
    PageableWithRevisions:
      $ref: './example/PageableWithRevisions.yaml'
    PageableWithVersions:
      $ref: './example/PageableWithVersions.yaml'

  responses:

    404DocumentOrVersionNotFound:
      $ref: './response/404DocumentOrVersionNotFound.yaml'

  parameters:

    DocumentId:
      $ref: './parameter/DocumentId.yaml'
    RevisionId:
      $ref: './parameter/RevisionId.yaml'
    DocumentVersion:
      $ref: './parameter/DocumentVersion.yaml'
    Page:
      $ref: './parameter/Page.yaml'
    Limit:
      $ref: './parameter/Limit.yaml'
    DocumentSort:
      $ref: './parameter/DocumentSort.yaml'
    RevisionSort:
      $ref: './parameter/RevisionSort.yaml'
    Filter:
      $ref: './parameter/Filter.yaml'

paths:

  /documents:

    get:
      summary: List documents
      description: Retrieves a list of the documents.
      operationId: getDocuments
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DocumentSort'
        - $ref: '#/components/parameters/Filter'
      responses:
        200:
          description: Successfully retrieved list of the documents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWithDocuments'
              examples:
                PageableWithVersions:
                  $ref: '#/components/examples/PageableWithDocuments'
        400:
          description: Either sort or filter pattern does not match the expected format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                SortParameterDoesNotMatch:
                  summary: Sort Parameter Does Not Match
                  value:
                    type: http://localhost:8080/errors/pattern-doesnt-match
                    title: Pattern Doesn't Match
                    status: 400
                    detail: "The 'sort' parameter does not match the expected format"
                    instance: /documents
                FilterParameterDoesNotMatch:
                  summary: Filter Parameter Does Not Match
                  value:
                    type: http://localhost:8080/errors/pattern-doesnt-match
                    title: Pattern Doesn't Match
                    status: 400
                    detail: "The 'filter' parameter does not match the expected format"
                    instance: /documents

  /documents/upload:

    post:
      summary: Upload document
      description: Uploads a document.
      operationId: uploadDocument
      tags:
        - documents
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - user
                - file
              properties:
                user:
                  $ref: '#/components/schemas/UserRequest'
                file:
                  type: string
                  format: binary
                path:
                  type: string
                  description: Path in which the document will be moved.
                  example: /home
                  minLength: 1
                  maxLength: 255
      responses:
        201:
          description: Document uploaded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDTO'
        400:
          description: Either invalid data provided or some request parts are missing.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - $ref: '#/components/schemas/ProblemDetailWithErrors'
              examples:
                InvalidDataProvided:
                  summary: Invalid Data Provided
                  value:
                    type: http://localhost:8080/errors/invalid-data
                    title: Invalid Data Provided
                    status: 400
                    instance: /documents/upload
                    errors: [ "Username is mandatory" ]
                MissingRequestPart:
                  summary: Missing Request Part
                  value:
                    type: http://localhost:8080/errors/missing-request-part
                    title: Missing Request Part
                    status: 400
                    detail: Required part 'user' is not present.
                    instance: /documents/upload
        409:
          description: File with provided path already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                FileWithPathAlreadyExists:
                  summary: File With Path Already Exists
                  value:
                    type: http://localhost:8080/errors/document-with-path-already-exists
                    title: File With Path Already Exists
                    status: 409
                    detail: "Document: dog.png with path: /home already exists"
                    instance: /documents/upload
        413:
          description: File size exceeded maximum upload size.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/payload-too-large
                title: Payload Too Large
                status: 413
                detail: "Maximum upload size exceeded"
                instance: /documents/upload
        500:
          description: Error occurred when working with a document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                WriteError:
                  summary: File Write Error
                  value:
                    type: http://localhost:8080/errors/file-operation
                    title: File Write Error
                    status: 500
                    detail: "An error occurred while writing data from file: dog.png"
                    instance: /documents/upload
                DefaultError:
                  summary: File Operation Error
                  value:
                    type: http://localhost:8080/errors/file-operation
                    title: File Operation Error
                    status: 500
                    detail: "An error occurred while working with the file"
                    instance: /documents/upload

  /documents/{documentId}:

    get:
      summary: Get document
      description: Retrieves a document.
      operationId: getDocument
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        200:
          description: Successfully retrieved details about a document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDTO'
        404:
          description: Document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5

    put:
      summary: Upload new document version
      description: Uploads a new document version.
      operationId: uploadNewDocumentVersion
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - user
                - file
              properties:
                user:
                  $ref: '#/components/schemas/UserRequest'
                file:
                  type: string
                  format: binary
                path:
                  type: string
                  description: Path in which the document will be moved.
                  example: /home
                  minLength: 1
                  maxLength: 255
      responses:
        201:
          description: New document version uploaded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDTO'
        400:
          description: Either invalid data provided or some request parts are missing.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ProblemDetail'
                  - $ref: '#/components/schemas/ProblemDetailWithErrors'
              examples:
                InvalidDataProvided:
                  summary: Invalid Data Provided
                  value:
                    type: http://localhost:8080/errors/invalid-data
                    title: Invalid Data Provided"
                    status: 400
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a
                    errors: [ "Username is mandatory" ]
                MissingRequestPart:
                  summary: Missing Request Part
                  value:
                    type: http://localhost:8080/errors/missing-request-part
                    title: Missing Request Part
                    status: 400
                    detail: Required part 'user' is not present.
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a
        404:
          description: The document for uploading new version not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5
        409:
          description: File with provided path already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                FileWithPathAlreadyExists:
                  summary: File With Path Already Exists
                  value:
                    type: http://localhost:8080/errors/document-with-path-already-exists
                    title: File With Path Already Exists
                    status: 409
                    detail: "Document: dog.png with path: /home already exists"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5
        500:
          description: Error occurred when working with a document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                WriteError:
                  summary: File Write Error
                  value:
                    type: http://localhost:8080/errors/file-operation
                    title: File Write Error
                    status: 500
                    detail: "An error occurred while writing data from file: dog.png"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5
                DefaultError:
                  summary: File Operation Error
                  value:
                    type: http://localhost:8080/errors/file-operation
                    title: File Operation Error
                    status: 500
                    detail: "An error occurred while working with the file"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5

    delete:
      summary: Delete document
      description: Deletes a document and all revisions associated to the document.
      operationId: deleteDocumentWithRevisions
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        204:
          description: Document deleted successfully.
        404:
          description: Document not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5
        500:
          description: Error occurred when working with a document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                DeleteError:
                  summary: File Deletion Error
                  value:
                    type: http://localhost:8080/errors/file-operation
                    title: File Deletion Error
                    status: 500
                    detail: "An error occurred while deleting the file: dog.png"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5
                DefaultError:
                  summary: File Operation Error
                  value:
                    type: http://localhost:8080/errors/file-operation
                    title: File Operation Error
                    status: 500
                    detail: "An error occurred while working with the file"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5

  /documents/{documentId}/download:

    get:
      summary: Download document
      description: Downloads a document.
      operationId: downloadDocument
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        200:
          description: "Document downloaded successfully."
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Specifies the filename for the downloaded document.
              schema:
                type: string
        404:
          description: Document not found for download.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/download
        500:
          description: Error occurred when working with a document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                ReadError:
                  summary: File Read Error
                  value:
                    type: http://localhost:8080/errors/file-operation
                    title: File Read Error
                    status: 500
                    detail: "An error occurred while reading the file: dog.png"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/download
                DefaultError:
                  summary: File Operation Error
                  value:
                    type: http://localhost:8080/errors/file-operation
                    title: File Operation Error
                    status: 500
                    detail: "An error occurred while working with the file"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/download

  /documents/{documentId}/move:

    put:
      summary: Move document
      description: Moves a document.
      operationId: moveDocument
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                path:
                  type: string
                  description: Path in which the document will be moved.
                  example: /home
                  minLength: 1
                  maxLength: 255
      responses:
        200:
          description: Document moved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDTO'
        409:
          description: File with path already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                FileWithPathAlreadyExists:
                  summary: File With Path Already Exists
                  value:
                    type: http://localhost:8080/errors/document-with-path-already-exists
                    title: File With Path Already Exists
                    status: 409
                    detail: "Document: dog.png with path: /home already exists"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/move

  /documents/{documentId}/revisions:

    get:
      summary: List document revisions
      description: Retrieves a list of document revisions.
      operationId: getDocumentRevisions
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/RevisionSort'
        - $ref: '#/components/parameters/Filter'
      responses:
        200:
          description: Successfully retrieved list of the revisions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWithRevisions'
              examples:
                PageableWithVersions:
                  $ref: '#/components/examples/PageableWithRevisions'
        400:
          description: Either sort or filter pattern does not match the expected format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                SortParameterDoesNotMatch:
                  summary: Sort Parameter Does Not Match
                  value:
                    type: http://localhost:8080/errors/pattern-doesnt-match
                    title: Pattern Doesn't Match
                    status: 400
                    detail: "The 'sort' parameter does not match the expected format"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a/revisions
                FilterParameterDoesNotMatch:
                  summary: Filter Parameter Does Not Match
                  value:
                    type: http://localhost:8080/errors/pattern-doesnt-match
                    title: Pattern Doesn't Match
                    status: 400
                    detail: "The 'filter' parameter does not match the expected format"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a/revisions

  /documents/{documentId}/revisions/{revisionId}:

    put:
      summary: Switch document to revision
      description: Switches document to a specific revision.
      operationId: switchToRevision
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/RevisionId'
      responses:
        200:
          description: Successfully switched document to revision.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDTO'
        404:
          description: Either document or revision was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                Document Not Found:
                  summary: Document Not Found
                  value:
                    type: http://localhost:8080/errors/document-not-found
                    title: Document Not Found
                    status: 404
                    detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/revisions/1
                Revision Not Found:
                  summary: Revision Not Found
                  value:
                    type: http://localhost:8080/errors/revision-not-found
                    title: Revision Not Found
                    status: 404
                    detail: "Revision with ID: 1 was not found for document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5"
                    instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/revisions/1

  /documents/{documentId}/versions:

    get:
      summary: List document versions
      description: Retrieves a list of document versions.
      operationId: getDocumentVersions
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: Successfully listed document versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWithVersions'
              examples:
                PageableWithVersions:
                  $ref: '#/components/examples/PageableWithVersions'
        404:
          description: Document not found for listing versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/document-not-found
                title: Document Not Found
                status: 404
                detail: "Document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
                instance: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5/versions

  /documents/{documentId}/versions/{version}:

    get:
      summary: Get document with version
      description: Retrieves a document with a version.
      operationId: getDocumentWithVersion
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/DocumentVersion'
      responses:
        200:
          description: Successfully retrieved document with a version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentWithVersionDTO'
        404:
          $ref: '#/components/responses/404DocumentOrVersionNotFound'

    put:
      summary: Switch document to version
      description: Switches document to a specific version.
      operationId: switchToVersion
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/DocumentVersion'
      responses:
        200:
          description: Successfully switched document to a version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDTO'
        404:
          $ref: '#/components/responses/404DocumentOrVersionNotFound'

  /revisions:

    get:
      summary: List revisions
      description: Retrieves a list of revisions.
      operationId: getRevisions
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/RevisionSort'
        - $ref: '#/components/parameters/Filter'
      responses:
        200:
          description: Successfully retrieved list of the revisions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWithRevisions'
              examples:
                PageableWithVersions:
                  $ref: '#/components/examples/PageableWithRevisions'
        400:
          description: Either sort or filter pattern does not match the expected format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                SortParameterDoesNotMatch:
                  summary: Sort Parameter Does Not Match
                  value:
                    type: http://localhost:8080/errors/pattern-doesnt-match
                    title: Pattern Doesn't Match
                    status: 400
                    detail: "The 'sort' parameter does not match the expected format"
                    instance: /revisions
                FilterParameterDoesNotMatch:
                  summary: Filter Parameter Does Not Match
                  value:
                    type: http://localhost:8080/errors/pattern-doesnt-match
                    title: Pattern Doesn't Match
                    status: 400
                    detail: "The 'filter' parameter does not match the expected format"
                    instance: /revisions

  /revisions/{revisionId}:

    get:
      summary: Get revision
      description: Retrieves a revision.
      operationId: getRevision
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/RevisionId'
      responses:
        200:
          description: Successfully retrieved a revision.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentRevisionDTO'
        404:
          description: Revision not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/revision-not-found
                title: Revision Not Found
                status: 404
                detail: "Revision with ID: f79fa8e0-c42d-40f5-90b9-00a4180990d1 not found"
                instance: /revisions/f79fa8e0-c42d-40f5-90b9-00a4180990d1

    delete:
      summary: Delete revision
      description: Deletes a revision.
      operationId: deleteRevision
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/RevisionId'
      responses:
        204:
          description: Successfully deleted a revision.
        404:
          description: Revision not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                RevisionNotFound:
                  summary: Revision Not Found
                  value:
                    type: http://localhost:8080/errors/revision-not-found
                    title: Revision Not Found
                    status: 404
                    detail: "Revision with ID: f79fa8e0-c42d-40f5-90b9-00a4180990d1 not found"
                    instance: /revisions/f79fa8e0-c42d-40f5-90b9-00a4180990d1
                RevisionDeletion:
                  summary: Revision Cannot Be Deleted
                  value:
                    type: http://localhost:8080/errors/revision-deletion-error
                    title: Revision Deletion Error
                    status: 404
                    detail: "Revision cannnot be deleted because this is the only version left for the document with ID: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5"
                    instance: /revisions/f79fa8e0-c42d-40f5-90b9-00a4180990d1
        500:
          description: Error occurred when working with a document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              examples:
                DeleteError:
                  summary: File Deletion Error
                  value:
                    type: http://localhost:8080/errors/file-operation
                    title: File Deletion Error
                    status: 500
                    detail: "An error occurred while deleting the file: dog.png"
                    instance: /revisions/f79fa8e0-c42d-40f5-90b9-00a4180990d1
                DefaultError:
                  summary: File Operation Error
                  value:
                    type: http://localhost:8080/errors/file-operation
                    title: File Operation Error
                    status: 500
                    detail: "An error occurred while working with the file"
                    instance: /revisions/f79fa8e0-c42d-40f5-90b9-00a4180990d1

  /revisions/{revisionId}/download:

    get:
      summary: Download revision
      description: Downloads a revision.
      operationId: downloadRevision
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/RevisionId'
      responses:
        200:
          description: Revision downloaded successfully.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Specifies the filename for the downloaded revision.
              schema:
                type: string
        404:
          description: Revision not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
              example:
                type: http://localhost:8080/errors/revision-not-found
                title: Revision Not Found
                status: 404
                detail: "Revision with ID: f79fa8e0-c42d-40f5-90b9-00a4180990d1 was not found"
                instance: /revisions/f79fa8e0-c42d-40f5-90b9-00a4180990d1/download
