openapi: 3.1.0

info:
  title: DMS
  summary: Document Management System for Software Documentation
  version: "1.0"

servers:
  - url: http://localhost:8080
    description: Local server

components:

  schemas:

    UserDTO:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: jakub
        email:
          type: string
          format: email
          example: jakub@gmail.com

    DocumentDTO:
      type: object
      properties:
        documentId:
          type: string
          format: uuid
          example: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a
        author:
          $ref: '#/components/schemas/UserDTO'
        name:
          type: string
          example: dog.jpeg
        type:
          type: string
          example: image/jpeg
        createdAt:
          type: string
          format: date-time
          example: 2023-10-14T09:32:01.485815
        updatedAt:
          type: string
          format: date-time
          example: 2023-10-14T09:32:01.485815

    DocumentRevisionDTO:
      type: object
      properties:
        revisionId:
          type: integer
          format: int64
          example: 1
        author:
          $ref: '#/components/schemas/UserDTO'
        name:
          type: string
          example: dog.jpeg
        type:
          type: string
          example: image/jpeg
        createdAt:
          type: string
          format: date-time
          example: 2023-10-14T09:32:01.485815

    UserRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 40
          example: jakub
        email:
          type: string
          format: email
          maxLength: 255
          example: jakub@gmail.com
      required:
        - username
        - email

    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
          example: http://localhost:8080/errors/resource-not-found
        title:
          type: string
          example: Resource Not Found
        status:
          type: integer
          example: 404
        detail:
          type: string
          example: "File with id: e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5 was not found"
        instance:
          type: string
          format: uri
          example: /documents/e6c9f6b8-df1b-4ac0-b4a7-d1dfb535e52a5

  responses:

    404DocumentNotFound:
      description: Document not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'

  headers:

    DocumentName:
      description: Specifies the filename for the downloaded document.
      schema:
        type: string
      example: "attachment; filename=dog.jpeg"

    RevisionName:
      description: Specifies the filename for the downloaded revision.
      schema:
        type: string
      example: "attachment; filename=dog.jpeg"

  requestBodies:

    UserAndFile:
      description: User with a file.
      required: true
      content:
        application/form-data:
          schema:
            type: object
            properties:
              user:
                name: user
                $ref: '#/components/schemas/UserRequest'
              file:
                name: file
                type: string
                format: binary

  parameters:

    DocumentId:
      name: id
      in: path
      required: true
      description: The document ID.
      schema:
        type: string
        format: uuid

    RevisionId:
      name: id
      in: path
      required: true
      description: The revision ID.
      schema:
        type: integer
        format: int64

    Revision:
      name: revision
      in: path
      required: true
      description: The revision ID.
      schema:
        type: integer
        format: int64

    DocumentVersion:
      name: version
      in: path
      required: true
      description: The document version.
      schema:
        type: integer
        format: int64

    Page:
      name: page
      in: query
      description: The page number for pagination.
      schema:
        type: integer
        minimum: 0
        default: 0

    Limit:
      name: limit
      in: query
      description: The maximum number of items to return per page.
      schema:
        type: integer
        minimum: 1
        default: 10

    Sort:
      name: sort
      in: query
      required: false
      description: |
        A comma-separated list of sort keys.
        Valid keys are 'documentId', 'authorAuthorId', 'name', 'type', 'hash', 'createdAt', 'updatedAt'.
        Each key can be sorted by either: asc (ascending order) or desc (descending order).
        Example usage: ?sort=name:desc,type:asc.
      schema:
        type: string
        pattern: '(([a-zA-Z]+):(asc|desc)(?:,|$))+'

    Filter:
      name: filter
      in: query
      required: false
      description: |
        A comma-separated list of filter keys.
        Valid keys are 'documentId', 'authorAuthorId', 'name', 'type', 'hash', 'createdAt', 'updatedAt'.
        Each key can be filtered using any value.
        Filtering operates by checking whether the string contains the given substring.
        Example usage: ?filter=name:logo,type:image
      schema:
        type: string
        pattern: '(([a-zA-Z]+):([^,]+)(?:,|$))+'

paths:

  /documents:

    get:
      description: Retrieve a list of the documents.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
      responses:
        200:
          description: Successfully retrieved list of the documents.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentDTO'
        400:
          description: Pattern does not match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /documents/{id}:

    get:
      description: Retrieves the details about a document.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        200:
          description: Successfully retrieved details about a document.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/DocumentDTO'
        404:
          $ref: '#/components/responses/404DocumentNotFound'

    put:
      description: Updates a document with id.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      requestBody:
        $ref: '#/components/requestBodies/UserAndFile'

      responses:
        200:
          description: Document updated successfully.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/DocumentDTO'
        400:
          description: Invalid data provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        404:
          description: Document for overwriting not found.
          $ref: '#/components/responses/404DocumentNotFound'

    delete:
      description: Deletes a document with id.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        204:
          description: Document deleted successfully.
        404:
          $ref: '#/components/responses/404DocumentNotFound'

  /documents/upload:

    post:
      description: Upload a document.
      tags:
        - documents
      requestBody:
        $ref: '#/components/requestBodies/UserAndFile'
      responses:
        201:
          description: Document uploaded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDTO'
        400:
          description: Missing request part.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        413:
          description: File size exceeded maximum upload size.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /documents/{id}/download:

    get:
      description: Downloads a document.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      responses:
        200:
          description: "Document downloaded successfully."
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              $ref: '#/components/headers/DocumentName'
        404:
          description: Document not found for download.
          $ref: '#/components/responses/404DocumentNotFound'

  /documents/{id}/revisions:

    get:
      description: List document revisions.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'
      responses:
        200:
          description: Successfully retrieved list of the revisions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentDTO'
        400:
          description: Pattern does not match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /documnets/{id}/revisions/upload:

    post:
      description: Upload document revision.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
      requestBody:
        $ref: '#/components/requestBodies/UserAndFile'
      responses:
        201:
          description: Revision uploaded successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDTO'
        400:
          description: Missing request part.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'

  /documents/{id}/revisions/{revision}:

    put:
      description: Switch document to a specific revision.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/Revision'

  /documents/{id}/versions:

    get:
      description: List document versions.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'

  /documents/{id}/versions/{version}:

    get:
      description: Get document version.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/DocumentVersion'

    put:
      description: Switch document to a specific version.
      tags:
        - documents
      parameters:
        - $ref: '#/components/parameters/DocumentId'
        - $ref: '#/components/parameters/DocumentVersion'

  /revisions:

    get:
      description: List all revisions.
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filter'

  /revisions/{id}:

    get:
      description: Get a revision.
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/RevisionId'

    delete:
      description: Delete revision.
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/RevisionId'

  /revisions/{id}/download:

    get:
      description: Download a revision.
      tags:
        - revisions
      parameters:
        - $ref: '#/components/parameters/RevisionId'
      responses:
        200:
          description: Revision downloaded successfully.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              $ref: '#/components/headers/RevisionName'
